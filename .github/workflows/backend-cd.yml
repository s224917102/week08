name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: 'anushakatuwal'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: 'anushakatuwal-rg'
      aks_acr_name:
        description: 'Name of ACR'
        required: true
        default: 'anushakatuwalacr'
      product_service_name:
        description: 'Service name for product'
        required: true
        default: 'product-service-w08e1'
      order_service_name:
        description: 'Service name for order'
        required: true
        default: 'order-service-w08e1'

permissions:
  contents: read
  id-token: write

# to avoid deployment overlapping issue
concurrency:
  group: backend-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: Production
    
    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP: ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Validate required secret
        run: |
            if [ -z "${{ secrets.AZURE_CREDENTIALS }}" ]; then
              echo "::error::Missing required repository secret AZURE_CREDENTIALS"
              exit 1
            fi
            echo "Required secret AZURE_CREDENTIALS is present."
     
      - name: Log in to Azure (OIDC)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set Kubernetes context (get AKS credentials)
        run: |
          set -euo pipefail
          az aks get-credentials --resource-group "${{ inputs.aks_resource_group }}" --name "${{ inputs.aks_cluster_name }}" --overwrite-existing
          
          CURRENT_CONTEXT=$(kubectl config current-context)
          echo "Current context: $CURRENT_CONTEXT"

      - name: Attach ACR
        run: |
          set -euo pipefail
          az aks update --name "${{ inputs.aks_cluster_name }}" --resource-group "${{ inputs.aks_resource_group }}" --attach-acr "${{ inputs.aks_acr_name }}"

      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        run: |
          set -euo pipefail
          echo "Deploying backend infrastructure..."
          cd k8s/
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml

      - name: Deploy Backend Microservices (Product, Order)
        run: |
          set -euo pipefail
          echo "Deploying backend microservices..."
          cd k8s/
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml
      
      - name: Wait for Backend LoadBalancer IPs
        env:
          PRODUCT_SERVICE_NAME:  ${{ inputs.product_service_name }}
          ORDER_SERVICE_NAME: ${{ inputs.order_service_name }}
        run: |
          set -euo pipefail
          echo "Waiting for Product, Order LoadBalancer IPs to be assigned (up to 5 minutes)..."
          PRODUCT_IP=""
          ORDER_IP=""
          
          for i in $(seq 1 60); do
            echo "Attempt $i/60 to get IPs..."
            PRODUCT_IP=$(kubectl get service "$PRODUCT_SERVICE_NAME" -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl get service "$ORDER_SERVICE_NAME" -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "All backend LoadBalancer IPs assigned!"
              echo "Product Service IP: $PRODUCT_IP"
              echo "Order Service IP: $ORDER_IP"
              break
            fi
            sleep 5 # Wait 5 seconds before next attempt
          done
          
          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "Error: One or more LoadBalancer IPs not assigned after timeout."
            exit 1 # Fail the job if IPs are not obtained
          fi
          
          # These are environment variables for subsequent steps in the *same job*
          # And used to set the job outputs
          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV

      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT
      
      - name: Capture Order Service IP for Workflow Output
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Logout from Azure
        run: az logout

  deploy_frontend:
    needs: [deploy_backend]
    uses: ./.github/workflows/frontend-cd.yml
    with:
      aks_cluster_name: 'anushakatuwal'
      aks_resource_group: 'anushakatuwal-rg'
      product_api_ip: ${{ needs.deploy_backend.outputs.product_api_ip }}
      order_api_ip: ${{ needs.deploy_backend.outputs.order_api_ip }}
    secrets: inherit