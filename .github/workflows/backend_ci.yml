# week08/.github/workflows/backend_ci.yml

name: Backend CI - Test, Build and Push Images to ACR

# update to trigger

# Trigger the workflow on pushes to the 'main' and 'feature/update-workflow' branch

on:
  # Manual trigger
  workflow_dispatch:

  # Automatically on pushes to main and 'feature/update-workflow' branch
  push:
    branches: [ feature/update-workflow, main ]
    paths: # Only trigger if changes are in backend directories
      - 'backend/**'
      - '.github/workflows/backend_ci.yml' # Trigger if this workflow file changes

# add 'pull_request:' to run on PRs
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'

permissions:
  contents: read
  id-token: write   # Required for OIDC

concurrency:
  group: backend-ci-${{ github.ref }}
  cancel-in-progress: true

# Define global environment variables that can be used across jobs
env:
  # Dynamically generate image tags based on Git SHA and GitHub Run ID
  # This provides unique, traceable tags for each image build
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  # Job 1: Run tests and linting for all backend services
  test_and_lint_backends:
    runs-on: ubuntu-latest # Use a GitHub-hosted runner
    strategy:
      matrix:
        service: [product_service, order_service]
    services:
      # Product DB container
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        # Make pg_isready available so the service is healthy before tests run
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      # Order DB
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # 1. Checkout the repository code to the runner
      - name: Checkout repository
        uses: actions/checkout@v4 # Action to check out your repository code

      # 2. Set up Python environment
      - name: Set up Python 3.10
        uses: actions/setup-python@v5 # Action to set up Python environment
        with:
          python-version: '3.10'

      # 3. Install dependencies and run code quality checks
      - name: Install dependencies
        run: | # Use a multi-line script to install pip dependencies
          pip install --upgrade pip
          # Loop through each backend service folder
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          # Install CI tools
          pip install pytest httpx

      # 5. Run tests for product service
      - name: Run tests for ${{ matrix.service }}
        working-directory: backend/${{ matrix.service }}
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: ${{ matrix.service == 'product_service' && '5432' || '5433' }}
          POSTGRES_DB: ${{ matrix.service == 'product_service' && 'products' || 'orders' }}
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

   # Decision to allow to push image only if secrets are present and github reference is main branch
  decide_to_push_image:
    runs-on: ubuntu-latest
    outputs:
      push_allowed: ${{ steps.result.outputs.push_allowed }}
    steps:
      - id: result
        env:
          BRANCH_REF: ${{ github.ref }}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
        run: |
          set -euo pipefail
          allow="false"
          if [ "$BRANCH_REF" = "refs/heads/main" ] && \
             [ -n "${AZURE_CREDENTIALS:-}" ] && \
             [ -n "${ACR_LOGIN_SERVER:-}" ]; then
            allow="true"
          fi
          echo "push_allowed=$allow" >> "$GITHUB_OUTPUT"
          echo " Allow push: $allow"

  # Job 2: Build and Push Docker Images (runs only if tests pass and image_push is true)
  build_and_push_images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [product_service, order_service]
    needs: [test_and_lint_backends, decide_to_push_image]
    if: needs.decide_to_push_image.outputs.push_allowed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Azure login using a Service Principal secret
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # Needs to be set as a GitHub Secret (Service Principal JSON)

      # Login to Azure Container Registry (ACR)
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ secrets.ACR_LOGIN_SERVER }}

      # Build and Push Docker image for Product and Order Service
      - name: Build & Push ${{ matrix.service }} image
        run: |
          docker build -t "${{ secrets.ACR_LOGIN_SERVER }}/${{ matrix.service }}:${{ env.IMAGE_TAG }}" ./backend/${{ matrix.service }}/
          docker tag  "${{ secrets.ACR_LOGIN_SERVER }}/${{ matrix.service }}:${{ env.IMAGE_TAG }}" "${{ secrets.ACR_LOGIN_SERVER }}/${{ matrix.service }}:latest"
          docker push "${{ secrets.ACR_LOGIN_SERVER }}/${{ matrix.service }}:${{ env.IMAGE_TAG }}"
          docker push "${{ secrets.ACR_LOGIN_SERVER }}/${{ matrix.service }}:latest"

      # Logout from Azure for security (runs even if image push fails)
      - name: Logout from Azure
        run: az logout
        if: always()
