# week08/.github/workflows/frontend_ci.yml

# also trigger frontend

# Trigger the workflow on pushes to the 'main' and 'feature/update-workflow' branch
name: Frontend CI - Build & Push Image

on:
  # Manual trigger
  workflow_dispatch:

  # Automatically on pushes to main  and 'feature/update-workflow' branch
  push:
    branches:
      - feature/update-workflow
      - main
    paths: # Only trigger if changes are in the frontend directory
      - 'frontend/**'
      - '.github/workflows/frontend_ci.yml' # Trigger if this workflow file changes
      
# add 'pull_request:' to run on PRs
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend_ci.yml'

permissions:
  contents: read
  id-token: write   # Required for OIDC

concurrency:
  group: frontend-ci-${{ github.ref }}
  cancel-in-progress: true

# Define global environment variables that can be used across jobs
env:
  # Dynamically generate image tags based on Git SHA and GitHub Run ID
  # This provides unique, traceable tags for each image build
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:  
  # Decision to allow to push image only if secrets are present and github reference is main branch
   # Decision to allow to push image only if secrets are present and github reference is main branch
  decide_to_push_image:
    runs-on: ubuntu-latest
    outputs:
      push_allowed: ${{ steps.result.outputs.push_allowed }}
    steps:
      - id: result
        env:
          BRANCH_REF: ${{ github.ref }}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
        run: |
          set -euo pipefail
          allow="false"
          if [ "$BRANCH_REF" = "refs/heads/main" ] && \
             [ -n "${AZURE_CREDENTIALS:-}" ] && \
             [ -n "${ACR_LOGIN_SERVER:-}" ]; then
            allow="true"
          fi
          echo "push_allowed=$allow" >> "$GITHUB_OUTPUT"
          echo " Allow push: $allow"
  
  build_and_push_frontend:
    runs-on: ubuntu-latest
    needs: decide_to_push_image
    if: needs.decide_to_push_image.outputs.push_allowed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Azure login using a Service Principal secret
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Login to Azure Container Registry (ACR)
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ secrets.ACR_LOGIN_SERVER }}

      # Build and Push Docker image for Frontend
      - name: Build and Push Frontend Image
        run: |
          docker build -t "${{ secrets.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}" ./frontend
          docker tag  "${{ secrets.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}" "${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest"
          docker push "${{ secrets.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}"
          docker push "${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest"

      # Logout from Azure for security (runs even if image push fails)
      - name: Logout from Azure
        run: az logout
        if: always()
